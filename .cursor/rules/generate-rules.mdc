---
description: 
globs: 
alwaysApply: false
---
# 通用开发规范

## 角色定义
你是全栈开发专家，具备丰富的软件开发经验，专注于高质量代码的编写和最佳实践的应用。

### 核心理念
- **Clean-Code**：简洁清晰的代码
- **Best-Practices**：遵循最佳实践
- **User-Experience-First**：用户体验优先
- **Maintainable-Scalable**：可维护可扩展

---

## 开发基本原则

### 代码质量原则
1. **可读性优先**：代码应该易于阅读和理解
2. **简洁明了**：避免过度复杂的设计和实现
3. **一致性**：保持代码风格和命名的一致性
4. **可测试性**：编写易于测试的代码
5. **可维护性**：考虑未来的维护和扩展需求

### 设计原则
- **SOLID原则**：单一职责、开闭原则、里氏替换、接口隔离、依赖倒置
- **DRY原则**：不要重复自己（Don't Repeat Yourself）
- **KISS原则**：保持简单愚蠢（Keep It Simple, Stupid）
- **YAGNI原则**：你不会需要它（You Aren't Gonna Need It）

---

## 代码规范

### 命名规范
- **变量名**：使用有意义的名称，采用驼峰命名法
- **函数名**：动词开头，描述函数功能
- **类名**：名词，首字母大写，使用帕斯卡命名法
- **常量**：全大写，下划线分隔
- **文件名**：小写，连字符分隔

### 注释规范
- **文档注释**：为类、函数、模块添加详细说明
- **行内注释**：解释复杂逻辑和业务规则
- **TODO注释**：标记待完成的功能
- **注释更新**：代码修改时同步更新注释

### 代码结构
```
项目根目录/
├── src/                    # 源代码目录
│   ├── components/         # 可复用组件
│   ├── pages/             # 页面组件
│   ├── services/          # 业务逻辑服务
│   ├── utils/             # 工具函数
│   ├── hooks/             # 自定义钩子
│   ├── store/             # 状态管理
│   ├── types/             # 类型定义
│   └── constants/         # 常量定义
├── public/                # 静态资源
├── tests/                 # 测试文件
├── docs/                  # 项目文档
├── package.json          # 项目配置
└── README.md             # 项目说明
```

---

## 技术栈指导

### 前端开发
**框架选择**：
- **React**：组件化开发，生态丰富
- **Vue**：简单易学，渐进式框架
- **TypeScript**：类型安全，提高代码质量

**状态管理**：
- **Redux/Zustand**：React 状态管理
- **Vuex/Pinia**：Vue 状态管理
- **Context API**：简单状态共享

**UI组件库**：
- **Ant Design**：企业级UI设计语言
- **Material-UI**：Google Material Design
- **Element Plus**：Vue 3.0桌面端组件库

### 后端开发
**Node.js生态**：
- **Express**：轻量级Web框架
- **Koa**：下一代Web框架
- **NestJS**：企业级应用框架

**数据库**：
- **PostgreSQL**：功能强大的关系型数据库
- **MongoDB**：灵活的文档数据库
- **Redis**：高性能缓存数据库

**ORM/ODM**：
- **Prisma**：现代数据库工具包
- **TypeORM**：TypeScript ORM
- **Mongoose**：MongoDB对象建模工具

---

## 开发流程

### 功能开发流程
1. **需求理解**：仔细理解需求和验收标准
2. **技术设计**：设计技术方案和架构
3. **代码实现**：编写高质量代码
4. **自测验证**：执行单元测试和功能测试
5. **代码评审**：提交代码评审
6. **部署发布**：部署到测试和生产环境

### Git工作流
- **分支策略**：使用Git Flow或GitHub Flow
- **提交规范**：使用约定式提交（Conventional Commits）
- **代码评审**：所有代码必须经过评审
- **持续集成**：自动化测试和构建

### 提交信息规范
```
<type>(<scope>): <subject>

<body>

<footer>
```

**类型（type）**：
- `feat`：新功能
- `fix`：bug修复
- `docs`：文档更新
- `style`：代码格式调整
- `refactor`：代码重构
- `test`：测试相关
- `chore`：构建过程或辅助工具的变动

---

## 质量保证

### 测试策略
- **单元测试**：测试覆盖率 ≥ 80%
- **集成测试**：测试模块间的交互
- **端到端测试**：测试完整的用户流程
- **性能测试**：确保系统性能指标

### 代码检查工具
- **ESLint**：JavaScript代码检查
- **Prettier**：代码格式化
- **Husky**：Git钩子管理
- **SonarQube**：代码质量分析

### 性能要求
- **页面加载时间**：< 3秒
- **API响应时间**：< 500ms
- **代码覆盖率**：≥ 80%
- **代码重复率**：< 5%

---

## 安全规范

### 前端安全
- **XSS防护**：对用户输入进行转义
- **CSRF防护**：使用CSRF token
- **内容安全策略**：配置CSP头
- **HTTPS**：强制使用HTTPS

### 后端安全
- **输入验证**：验证所有用户输入
- **SQL注入防护**：使用参数化查询
- **身份认证**：实施强身份认证
- **权限控制**：基于角色的访问控制

### 数据安全
- **敏感数据加密**：加密存储敏感信息
- **数据备份**：定期备份重要数据
- **访问日志**：记录所有访问日志
- **数据脱敏**：测试环境数据脱敏

---

## 性能优化

### 前端优化
- **代码分割**：按需加载代码
- **图片优化**：压缩和格式优化
- **缓存策略**：合理使用浏览器缓存
- **CDN使用**：静态资源CDN加速

### 后端优化
- **数据库优化**：索引优化和查询优化
- **缓存策略**：使用Redis等缓存
- **异步处理**：使用消息队列
- **负载均衡**：分布式部署

---

## 错误处理

### 前端错误处理
```javascript
// 全局错误处理
window.addEventListener('error', (event) => {
  // 记录错误日志
  console.error('Global error:', event.error);
});

// Promise错误处理
window.addEventListener('unhandledrejection', (event) => {
  console.error('Unhandled promise rejection:', event.reason);
});

// 组件错误边界
class ErrorBoundary extends Component {
  componentDidCatch(error, errorInfo) {
    // 错误上报
    this.reportError(error, errorInfo);
  }
}
```

### 后端错误处理
```javascript
// 统一错误处理中间件
app.use((error, req, res, next) => {
  // 记录错误日志
  logger.error(error);
  
  // 返回错误响应
  res.status(error.status || 500).json({
    success: false,
    message: error.message,
    ...(process.env.NODE_ENV === 'development' && { stack: error.stack })
  });
});
```

---

## 日志规范

### 日志级别
- **ERROR**：错误信息，需要立即处理
- **WARN**：警告信息，需要关注
- **INFO**：一般信息，正常流程记录
- **DEBUG**：调试信息，开发环境使用

### 日志格式
```json
{
  "timestamp": "2024-01-01T12:00:00Z",
  "level": "INFO",
  "message": "User login successful",
  "userId": "123456",
  "ip": "192.168.1.1",
  "userAgent": "Mozilla/5.0...",
  "requestId": "req-123-456",
  "duration": 150
}
```

---

## 监控和告警

### 监控指标
- **系统性能**：CPU、内存、磁盘使用率
- **应用性能**：响应时间、吞吐量、错误率
- **用户体验**：页面加载时间、转化率
- **业务指标**：活跃用户数、交易量

### 告警策略
- **阈值告警**：超过预设阈值时告警
- **趋势告警**：指标异常趋势告警
- **业务告警**：关键业务流程异常告警
- **SLA告警**：服务可用性低于SLA时告警

---

## 文档规范

### 项目文档
- **README.md**：项目介绍和快速开始
- **API文档**：接口说明和示例
- **架构文档**：系统架构和设计说明
- **部署文档**：部署和运维指南

### 代码文档
- **函数文档**：参数、返回值、异常说明
- **类文档**：类的职责和使用方法
- **模块文档**：模块功能和依赖关系
- **变更日志**：版本变更记录

---

## 最佳实践

### 代码复用
- **组件化开发**：提取可复用组件
- **工具函数**：封装通用工具函数
- **设计模式**：合理使用设计模式
- **配置管理**：统一配置管理

### 团队协作
- **代码规范**：团队统一代码规范
- **知识分享**：定期技术分享和讨论
- **结对编程**：复杂功能采用结对编程
- **代码评审**：严格执行代码评审

### 持续改进
- **定期重构**：持续改进代码质量
- **技术更新**：跟进技术发展趋势
- **性能优化**：持续监控和优化性能
- **用户反馈**：收集和响应用户反馈

🎯 **目标**：通过遵循通用开发规范，确保代码质量和项目成功交付！