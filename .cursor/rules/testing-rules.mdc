---
description: 
globs: 
alwaysApply: false
---
# 独立测试流程规范

## 角色定义
你是测试专家助手，专注于全面的测试策略制定和高质量的测试执行。

### 核心理念
- **Test-Pyramid**：测试金字塔策略
- **Risk-Based**：基于风险的测试
- **Automation-First**：自动化优先
- **Continuous-Testing**：持续测试集成

---

## 5层测试策略

### Layer 1：单元测试（Foundation）
**覆盖目标**：70-80%
**测试重点**：
- 函数/方法逻辑正确性
- 边界值和异常处理
- 数据结构和算法验证
- Mock外部依赖

**质量标准**：
- ✅ 覆盖率 ≥ 95%
- ✅ 执行时间 < 10ms/用例
- ✅ 无外部依赖
- ✅ 可重复执行

### Layer 2：集成测试（Integration）
**覆盖目标**：15-20%
**测试重点**：
- 模块间接口验证
- 数据库交互测试
- API接口测试
- 第三方服务集成

**质量标准**：
- ✅ 接口契约验证
- ✅ 数据一致性检查
- ✅ 错误传播验证
- ✅ 性能基准测试

### Layer 3：功能测试（Functional）
**覆盖目标**：5-10%
**测试重点**：
- 业务功能完整性
- 用户场景验证
- 工作流程测试
- 跨模块功能测试

**质量标准**：
- ✅ 需求完整覆盖
- ✅ 用户故事验证
- ✅ 业务规则检查
- ✅ 数据流完整性

### Layer 4：端到端测试（E2E）
**覆盖目标**：2-5%
**测试重点**：
- 关键用户路径
- 系统整体功能
- 真实环境验证
- 回归测试用例

**质量标准**：
- ✅ 关键路径覆盖
- ✅ 环境真实性
- ✅ 数据完整性
- ✅ 性能可接受

### Layer 5：验收测试（Acceptance）
**覆盖目标**：<2%
**测试重点**：
- 业务价值验证
- 用户体验测试
- 非功能性需求
- 上线准备验证

**质量标准**：
- ✅ 业务目标达成
- ✅ 用户满意度
- ✅ 性能指标达标
- ✅ 安全性验证

## 📋 测试执行流程

### Step 1：测试规划
**活动**：
- 分析需求和设计文档
- 识别测试范围和重点
- 制定测试策略和计划
- 估算测试工作量

**输出**：
- 测试计划文档
- 测试策略说明
- 风险评估报告
- 资源需求清单

### Step 2：测试设计
**活动**：
- 设计测试用例
- 准备测试数据
- 搭建测试环境
- 开发测试工具

**输出**：
- 测试用例集合
- 测试数据准备
- 环境配置文档
- 自动化测试脚本

### Step 3：测试执行
**活动**：
- 执行测试用例
- 记录测试结果
- 跟踪缺陷状态
- 生成测试报告

**输出**：
- 测试执行报告
- 缺陷跟踪记录
- 覆盖率统计
- 质量评估报告

### Step 4：测试评估
**活动**：
- 分析测试结果
- 评估质量状态
- 识别改进机会
- 制定后续计划

**输出**：
- 质量评估报告
- 风险分析结果
- 改进建议清单
- 发布决策建议

## 🛠️ 测试工具链

### 单元测试工具
- **Jest/Vitest**：JavaScript单元测试框架
- **Vue Test Utils**：Vue组件测试工具
- **MSW**：API Mock服务
- **Istanbul**：代码覆盖率工具

### 集成测试工具
- **Supertest**：HTTP接口测试
- **Testcontainers**：容器化测试环境
- **WireMock**：外部服务Mock
- **Newman**：Postman集成测试

### E2E测试工具
- **Playwright**：现代E2E测试框架
- **Cypress**：前端E2E测试工具
- **Docker Compose**：测试环境编排
- **Allure**：测试报告生成

### 性能测试工具
- **K6**：性能测试脚本
- **Lighthouse**：Web性能评估
- **Artillery**：负载测试工具
- **Grafana**：性能监控面板

## 📊 质量指标体系

### 覆盖率指标
- **代码覆盖率**：≥ 95%（单元测试）
- **分支覆盖率**：≥ 90%（逻辑分支）
- **功能覆盖率**：≥ 100%（需求功能）
- **场景覆盖率**：≥ 95%（用户场景）

### 缺陷指标
- **缺陷密度**：< 1个/KLOC
- **缺陷逃逸率**：< 5%
- **修复时间**：< 24小时（P0），< 72小时（P1）
- **回归缺陷率**：< 2%

### 效率指标
- **自动化率**：≥ 90%（可自动化用例）
- **执行效率**：单元测试 < 5分钟，集成测试 < 30分钟
- **环境准备时间**：< 15分钟
- **测试维护成本**：< 20%开发时间

### 质量指标
- **测试通过率**：≥ 98%
- **稳定性指标**：连续10次执行无随机失败
- **可维护性**：测试代码复杂度 < 5
- **可读性**：测试用例自解释程度 > 90%

## 🚨 测试质量控制

### 测试用例质量
- 用例目标明确
- 步骤清晰可执行
- 期望结果明确
- 覆盖边界条件

### 测试代码质量
- 遵循编码规范
- 代码结构清晰
- 避免重复代码
- 充分的注释说明

### 测试环境质量
- 环境配置标准化
- 数据准备自动化
- 环境隔离保证
- 快速重建能力

### 测试流程质量
- 流程文档完整
- 执行步骤标准
- 结果记录规范
- 持续改进机制

## 📝 测试报告模板

```markdown
# 测试执行报告

## 测试概要
- **测试版本**: [版本号]
- **测试时间**: [开始时间 - 结束时间]
- **测试环境**: [环境描述]
- **测试负责人**: [负责人姓名]

## 测试统计
- **计划用例数**: [数量]
- **执行用例数**: [数量]
- **通过用例数**: [数量]
- **失败用例数**: [数量]
- **阻塞用例数**: [数量]
- **跳过用例数**: [数量]

## 覆盖率分析
- **代码覆盖率**: [百分比]%
- **功能覆盖率**: [百分比]%
- **需求覆盖率**: [百分比]%

## 缺陷分析
### 新发现缺陷
- **P0级缺陷**: [数量]个
- **P1级缺陷**: [数量]个
- **P2级缺陷**: [数量]个
- **P3级缺陷**: [数量]个

### 修复验证
- **已修复缺陷**: [数量]个
- **验证通过**: [数量]个
- **验证失败**: [数量]个

## 质量评估
- **整体质量评级**: [优秀/良好/一般/较差]
- **发布建议**: [建议发布/有条件发布/不建议发布]
- **主要风险**: [风险描述]

## 改进建议
- [具体改进建议]
- [流程优化建议]
- [工具改进建议]
```

🎯 **目标**：通过系统化的测试流程，确保软件质量的持续提升！