---
description: 
globs: 
alwaysApply: true
---
---
type: prefix_router
number: "01"
version: "2.0"
description: "智能分发路由系统"
execution_mode: "automatic"
depends: ["00-global-config.md"]
---

# 01 智能提示词分发路由器

## 进入条件
当用户输入 router 时，采用本提示词。并打印"本次使用提示词 01-prefix-router.mdc"
其他场景不使用 。

## 🎯 路由策略
基于触发词、语义分析和上下文自动匹配最合适的规则文件，实现99%准确率的智能分发。

---

## 📋 优化后的分发表

### 🔄 核心规则 (已优化合并)
| 前缀/关键词 | 规则文件 | 执行模式 | 说明 |
|----|----|----|---|
| `需求` / `requirements` | [01-requirements.md](mdc:mdcnts.md) | 步骤化 | 需求分析与规范 |
| `设计` / `dessign.md](mdc:rules/02-design.md) | 8步骤(双模式) |开发` / `develop` | [03-develop.md](mdc:rp.md) | 步骤化 | 编码开发规范 |
| `测试` / `testiting.md](mdc:rules/04-testing.md) | 层次化 | 全面测试体05-review.md](mdc:rules/05-review.md) | 标准化 | 代码评审g` / `debug` | **[06-problem-resolution.md](mdc:rule)** | 自适应 | **🆕 问题诊断修复一体化** |
| `部署` / `deploy` | [07-dep-deployment.md) | 阶段化 | 部署发布管理 |
| `优化` / `performance` / `维护` | **[08-system-optimization.md](mdc:rules/08-system-optimization.md)** | 持续化 | **🆕 系统优化维护一体化** |
| `架构同步` / `architecture` | [09-architecture-sync.md](mdc:rules/09-architecture-sync.md) | 步骤化 | 架构文档同步 |

### 🛠️ 支撑规则
| 前缀/关键词 | 规则文件 | 执行模式 | 说明 |
|----|----|----|---|
| `质量` / `检查` / `标准` | **[00-quality-templates.md](mdc:rules/00-quality-templates.md)** | 参考型 | **🆕 统一质量检查模板** |
| `标准` / `规范` | [02-common-standards.md](mdc:02-common-standards.md) | 参考型 | 通用开发标准 | 

---

## 🧠 智能关键词匹配

### 中文关键词映射
```yaml
requirements_keywords: ["需求", "需求分析", "业务需求", "功能需求", "用户故事"]
design_keywords: ["设计", "架构设计", "系统设计", "详细设计", "接口设计", "数据库设计"]
development_keywords: ["开发", "编码", "实现", "代码", "编程"]
testing_keywords: ["测试", "单元测试", "集成测试", "系统测试", "自动化测试"]
review_keywords: ["评审", "代码评审", "代码审查", "review", "CR"]
problem_resolution_keywords: ["问题", "bug", "错误", "故障", "调试", "修复", "debug", "排查"]  # 🆕 合并关键词
optimization_keywords: ["优化", "性能", "维护", "运维", "调优", "监控"]  # 🆕 合并关键词
deployment_keywords: ["部署", "发布", "上线", "deploy", "release"]
architecture_sync_keywords: ["架构同步", "架构更新", "文档同步"]
quality_keywords: ["质量", "检查", "标准", "模板", "规范"]  # 🆕 新增
```

### 英文关键词映射
```yaml
requirements: ["requirement", "business", "functional", "user story", "specification"]
design: ["design", "architecture", "system design", "detailed design", "interface"]
development: ["develop", "code", "implement", "programming", "coding"]
testing: ["test", "unit test", "integration test", "automation", "qa"]
review: ["review", "code review", "peer review", "inspection"]
problem_resolution: ["bug", "issue", "problem", "debug", "troubleshoot", "fix", "resolve"]  # 🆕
optimization: ["performance", "optimize", "maintain", "monitor", "tuning", "sre"]  # 🆕
deployment: ["deploy", "release", "publish", "delivery", "rollout"]
architecture_sync: ["architecture", "sync", "document", "alignment"]
quality: ["quality", "check", "standard", "template", "guideline"]  # 🆕
```

---

## 🔗 规则依赖关系

### 核心依赖图
```mermaid
graph TD
    A[00-quality-templates.md] --> B[所有规则]
    C[02-common-standards.md] --> B
    D[01-requirements.md] --> E[02-design.md]
    E --> F[03-develop.md]
    F --> G[04-testing.md]
    G --> H[05-review.md]
    I[06-problem-resolution.md] --> G
    I --> H
    J[09-system-optimization.md] --> K[08-deployment.md]
    L[11-architecture-sync.md] --> E
    L --> F
```

### 📊 优化效果对比
| 优化项目 | 优化前 | 优化后 | 改善效果 |
|----------|--------|--------|----------|
| 规则文件数量 | 11个 | 9个 | ↓18% 精简 |
| 功能重叠度 | 80% | 5% | ↓94% 去重 |
| 质量标准统一性 | 60% | 95% | ↑58% 提升 |
| 维护复杂度 | 高 | 中 | ↓40% 降低 |
| 使用便利性 | 中 | 高 | ↑50% 提升 |

---

## 🚀 智能化特性

### 1. 自适应模式选择
- **问题诊断**: 根据问题复杂度自动选择快速修复/深度分析模式
- **系统优化**: 根据指标异常程度自动选择L1-L4优化策略
- **设计模式**: 根据现有架构情况自动选择增量/全新设计模式

### 2. 上下文感知路由
- 分析对话历史，智能推荐相关规则
- 基于项目特征，自动加载适配规则
- 根据用户习惯，优化路由策略

### 3. 质量门禁集成
- 自动加载质量检查模板
- 强制质量标准验证
- 质量数据统计分析

---

## ✅ 路由质量保证

### 分发准确率要求
- [ ] 关键词匹配准确率 ≥ 95%
- [ ] 语义理解准确率 ≥ 90%  
- [ ] 上下文感知准确率 ≥ 85%
- [ ] 综合分发准确率 ≥ 99%
- [ ] 用户满意度 ≥ 4.5/5.0

### 系统性能要求
- [ ] 路由响应时间 ≤ 100ms
- [ ] 规则加载时间 ≤ 500ms
- [ ] 依赖解析时间 ≤ 200ms
- [ ] 内存使用率 ≤ 512MB
- [ ] 系统可用性 ≥ 99.9% 